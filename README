Readme for APC 524 HW3 
Author: Jeff Lestz
Last Modified: 4 December 2016 

This directory contains the following 4 python files: newton.py, testNewton.py, functions.py, testFunctions.py. Together, newton.py and functions.py implement a Newton-Raphson solver for functions R^N --> R^M, N,M positive integers. testNewton.py contains unit tests to test specific features of newton.py. testFunctions.py does the same for functions.py

=================
=== newton.py ===
=================
newton.py defines the Newton class, which contains the actual solver. A sample initialization call: 
~~~
solver = newton.Newton(f,tol=tol,maxiter=maxiter,dx=dx,Df=Df)
~~~
f is the function to solve 
tol is the tolerance of the zero finder (halts when |f(x_k)| < tol
maxiter is the maximum number of steps before stopping 
dx is the step size used to compute an approximate Jacobian, if no analytic Jacobian is specified 
Df is the function to use to compute the Jacobian of f. If Df is not specified, a numerical approximation (implemented in functions.py) will be used.

With solver initialized as above, f(x) = 0 will be solved by calling: 
~~~ 
xsol=solver.solve(x0,r=rsearch)
~~~ 
x0 is the initialize guess, passed as an array-like variable (numpy.array, numpy.matrix, etc) 
r is an optional argument specifying the distance to search near the initialize guess before failure (halts when (|x_k - x0| > r)). Due to the nature of zero finding, it is possible to have solutions exist with |x_sol -x0| < r that are not found due to some intermediate steps exceeding the boundary. 

Alternatively, it is also possible to take a single Newton-Raphson step: 
~~~ 
x1 = solver.step(x0,fx=fx)
~~~ 
x0 is the initialize guess
fx is the value of the function f(x) to solve. If fx is not specified, the value of the function stored in the solver, self._f(x), is used. 

newton.solve loops over newton.step until one of the following conditions is reached (in order of precedence): 
1. Search radius is exceeded ( |x_k - x0| > r ) 
2. Numerical zero is found ( |f(x_k)| < tol ) 
3. Maximum number of iterations is reached ( k > maxiter)
Outcomes (1) and (3) each raise a RuntimeError, while (2) returns x_k. 
Below is an exampe which returns xsol=-1.26e-08. Note that restricting to r=1 leads to no solution here, despite |xsol-x0| < 1. 
~~~
import numpy as N
x0=N.pi/4
solver=newton.Newton(N.sin,tol=1.e-6,maxiter=20,dx=1.e-6)
xsol=solver.solve(x0,r=2)
~~~

====================
=== functions.py ===
====================

functions.py contains functions to compute Jacobians numerically, polynomials, and three special functions: "PolyLog"s, "ExpSin"s, and "Trig"s

To compute a numerical Jacobian (first order accurate, forward difference), call: 
~~~ 
dF = ApproximateJacobian(f,x,dx=dx)
~~~ 
f is the function whose Jacobian you want to calculate numerically
x is the point to evaluate the Jacobian at 
dx is the step size to use in the forward difference method 

Polynomial, PolyLog, ExpSin, Trig classes each have the following functions:
1. f(x) -- returns the function at x (duplicated by __call__) 
2. Df(x) -- returns the analytic Jacobian at x
Each of these functions can be evaluated at x specified by a numpy array or matrix of the correct dimension. 

Polynomial(coeffs) is a polynomial object of a single variable defined by: 
    P(x) = sum_{i=0}^{N-1} coeffs(i) * x^{N-1-i}

PolyLog(coeffs,power) is a product of a polynomial and a (natural) logarithm raised to a power (each of a single variable) defined by: 
    P(x) = sum_{i=0}^{N-1} coeffs(i) * x^{N-1-i} * log^power(x)

ExpSin(dimen) is a product of exponential decay and a sin function in n dimensions defined by: 
    P(x) = exp(-sum_{i=0}^{dimen-1} x_i^2) * sin(prod_{i=0}^{dimen-1} x_i)

Trig() is a 2D vector-valued function of elementary trig functions: 
    Suppose z = [x,y], then 
    P(z) = [ [Cos(x-y)],[Sin(x+y)] ]

=====================
=== testNewton.py ===
=====================

testNewton.py contains unit tests for the functions in newton.py. The tests are grouped by functionality below. See testNewton.py for more detailed descriptions of each test. Note that some of these classifications are arbitrary, as accurate solutions of complex functions also implies a great likelihood that the individual steps were accurate, etc. 

1. Single Newton-Raphson step is accurate 
    testStep: single step of f(x)=x+1 returns correct value 

2. Newton-Raphson solutions are accurate 
    A. For functions of R^1 --> R^1
        testLinear: 3x + 6 has correct solution 
        testTrig: sinx,cosx have correct solutions 
        testAiry: Airy function has correct solution
    B. For functions of R^N --> R^M (N,M not both 1) 
        testSolution2D: solves R^2-->R^2 Trig() function
        testSolution3D: solves R^3-->R^3 linear system 

3. Exception raised after maxiters 
    testNoRoot: x^2 + 1,maxiter=100 raises exception 
    testMaxItersReached: f=x^2,x0=1,maxiter=2 raises exception 
    testMaxItersNotReached: f=x^2,x0=1,maxiter=3 finds solution 
    testExpMaxIters: f=e^x,maxiter=3,r=4, halts due to maxiter

4. Analytic Jacobian is used when Df specified 
    testAnalSin: f=N.sin,Df=N.cos, finds solution 
    testPolyLogAnalVsNum: First step and solution of PolyLog with numerical vs analytically prescribed Jacobian are each not equal

5. Exception raised when x leaves search region
    testRadiusZero: r=0 raises exception 
    testExpMaxRadius: f=e^x,maxiter=4,r=3, halts due to search radius
    testStepBeyondSearch: f=x^2-1,x0=0.1,r=2, halts due to search radius
    testStepBeyondSearchSuccess: f=x^2-1,x0=0.1,r=5, finds solution 

========================
=== testFunctions.py ===
========================

testFunctions.py contains unit tests for the functions in functions.py. The tests are grouped by functionality below. See testFunctions.py for more detailed descriptions of each test. 

1. Numerically computed Jacobian is accurate 
    A. For functions of R^1 --> R^1 
        testApproxJacobian1: 3x + 5 has correct Jacobian
    B. For functions of R^N --> R^M (N,M not both 1) 
        testApproxJacobian2: R^2-->R^2 linear system has correct Jcbn
        testApproxJacobian3: R^2-->R^1 linear system has correct Jcbn
        testApproxJacobian4: R^1-->R^2 linear system has correct Jcbn

2. Specified functions have accurate values and Jacobians 
    testPolynomial: x^2+2x+3 Polynomial has correct values
    testPolyLogVals: PolyLog reduces to Log, PolyLog reduces to Polynomial, nontrivial PolyLog has correct values and analytic derivatives 
    testExpSinVals: ExpSin has correct values and analytic Jacobian
    testExpSinInput: ExpSin works with inputs as list,np.array,np.matrix

3. Analytic Jacobians match numerical approximations 
    checkAnalJacobian: tests if analytic and numerical Jacobians are close
    testPolynomialJacobian: Polynomial checkAnalJacobian for x=-10 to 10
    testPolyLogJacobian: PolyLog checkAnalJacobian for x=.1 to 2
    testExpSinJacobian: 2D ExpSin checkAnalJacobian for x,y=-2pi to 2pi
